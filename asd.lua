local p,w=print,warn;local HttpService,Players,LocalPlayer,ReplicatedStorage=game:GetService("HttpService"),game:GetService("Players"),game:GetService("Players").LocalPlayer,game:GetService("ReplicatedeStorage");local requestFunc=request or http_request or(syn and syn.request)or(fluxus and fluxus.request);if type(requestFunc)~="function"then w("!NO REQ")return end;local ngrok_url="https://YOUR_NGROK_URL.ngrok-free.app";local scriptState,lastProcessedJobId="IDLE",nil;p("SCRIPT_INIT: STATE=IDLE");while true do if scriptState=="IDLE"then pcall(function()p("IDLE:POLL");local res=requestFunc({Url=ngrok_url.."/api/get_data",Method="GET"});if res and res.StatusCode==200 and res.Body then local serverData=HttpService:JSONDecode(res.Body);if serverData and serverData.job_id and serverData.job_id~=lastProcessedJobId then p("NEW_JOB:"..serverData.job_id);lastProcessedJobId=serverData.job_id;scriptState="BUSY";local targetPlayerInfo,itemToGive=serverData.player_info,serverData.item_to_give;p("BUSY:TGT="..targetPlayerInfo.username.." | ITEM="..itemToGive.name.." x"..itemToGive.quantity);local player_list_for_post,isTargetPlayerInServer={},false;for _,player in ipairs(Players:GetPlayers())do table.insert(player_list_for_post,{username=player.Name,user_id=player.UserId});if player.UserId==targetPlayerInfo.user_id then isTargetPlayerInServer=true end end;local check_data_to_send={players=player_list_for_post,target_check={found=isTargetPlayerInServer,target_username=targetPlayerInfo.username,target_id=targetPlayerInfo.user_id}};local check_json_body=HttpService:JSONEncode(check_data_to_send);local post_res=requestFunc({Url=ngrok_url.."/api/player_list",Method="POST",Headers={["Content-Type"]="application/json"},Body=check_json_body});if post_res and post_res.StatusCode==200 then local final_data=HttpService:JSONDecode(post_res.Body);if final_data and final_data.status=="success"then p("TGT_OK. DELIVERY_START");local rejectionTimeout,maxAttempts,startTime=45,2,os.clock();local targetPlayer=Players:FindFirstChild(targetPlayerInfo.username);local petGiftingRemote,humanoid=ReplicatedStorage:WaitForChild("GameEvents",20):WaitForChild("PetGiftingService",20),LocalPlayer.Character:WaitForChild("Humanoid");local pets_to_process,inv_log_before={},{}local petContainer=LocalPlayer:WaitForChild("Backpack",10);for _,item in ipairs(petContainer:GetChildren())do if item:IsA("Tool")and item:GetAttribute("PET_UUID")then table.insert(inv_log_before,item:GetAttribute("PET_UUID"));if #pets_to_process<itemToGive.quantity and item.Name==itemToGive.name then table.insert(pets_to_process,{tool=item,uuid=item:GetAttribute("PET_UUID"),name=item.Name,status="pending",attempts=0})end end end;if #pets_to_process>0 then p("QUEUE:"..#pets_to_process.." PETS");local processed_count,force_stop=0,false;task.spawn(function()while processed_count<#pets_to_process and not force_stop do for _,petData in ipairs(pets_to_process)do if(petData.status=="pending"or petData.status=="failed_once")and petData.attempts<maxAttempts then petData.attempts=petData.attempts+1;p(">SEND "..petData.name.." #"..petData.attempts);humanoid:EquipTool(petData.tool);task.wait(0.2);petGiftingRemote:FireServer("GivePet",targetPlayer,petData.uuid);petData.status="sent";petData.sent_time=os.clock();task.wait(1)end end;task.wait(1)end end);task.spawn(function()while processed_count<#pets_to_process and not force_stop do if not Players:FindFirstChild(targetPlayerInfo.username)then w("!TGT_LEFT,FORCE_STOP");force_stop=true;break end;local received_uuids={};local targetBackpack=targetPlayer:FindFirstChild("Backpack");if targetBackpack then for _,receivedTool in ipairs(targetBackpack:GetChildren())do if receivedTool:IsA("Tool")and receivedTool:GetAttribute("PET_UUID")then received_uuids[receivedTool:GetAttribute("PET_UUID")]=true end end end;for _,petData in ipairs(pets_to_process)do if petData.status=="sent"then if received_uuids[petData.uuid]then petData.status="verified";processed_count=processed_count+1;p(">OK "..petData.name)elseif(os.clock()-petData.sent_time>rejectionTimeout)then if petData.attempts<maxAttempts then petData.status="failed_once";p(">TIMEOUT "..petData.name)else petData.status="permanently_failed";processed_count=processed_count+1;w("!FAIL "..petData.name)end end end end;task.wait(0.5)end end);repeat task.wait(1)until processed_count>=#pets_to_process or force_stop;local inv_log_after,report={},{}for _,i in ipairs(LocalPlayer.Backpack:GetChildren())do if i:IsA("Tool")and i:GetAttribute("PET_UUID")then table.insert(inv_log_after,i:GetAttribute("PET_UUID"))end end;report.uuids={successful={},failed={}};report.delivery_info={receiver={username=targetPlayerInfo.username,user_id=targetPlayerInfo.user_id},counts={successful=0,failed=0}};for _,petData in ipairs(pets_to_process)do if petData.status=="verified"then report.delivery_info.counts.successful=report.delivery_info.counts.successful+1;table.insert(report.uuids.successful,petData.uuid)else report.delivery_info.counts.failed=report.delivery_info.counts.failed+1;table.insert(report.uuids.failed,petData.uuid)end end;report.status=force_stop and "interrupted" or (report.delivery_info.counts.failed==0 and "success" or "partial_failure");report.duration=os.clock()-startTime;report.inventory_logs={before=inv_log_before,after=inv_log_after};p("REPORTING:"..report.status);local report_body=HttpService:JSONEncode(report);requestFunc({Url=ngrok_url.."/api/report_delivery",Method="POST",Headers={["Content-Type"]="application/json"},Body=report_body});else w("!DELIVERY_ERR:NO_PETS_FOUND") end;else w("!TGT_CHECK_FAIL:"..(final_data and final_data.message or "Unknown"));end end;scriptState="IDLE";p("TASK_END. STATE=IDLE") end end end)end;task.wait(5)end
