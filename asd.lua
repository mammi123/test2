local p,w=print,warn;local HttpService,Players,LocalPlayer,ReplicatedStorage=game:GetService("HttpService"),game:GetService("Players"),game:GetService("Players").LocalPlayer,game:GetService("ReplicatedStorage");local requestFunc=request or http_request or(syn and syn.request)or(fluxus and fluxus.request);if type(requestFunc)~="function"then w("!NO REQ")return end;local ngrok_url="https://6243-2a02-a317-2293-6d80-d517-cf9b-e83f-8f68.ngrok-free.app/";local jobTimeout=300;local scriptState,lastProcessedJobId,currentJob,jobStartTime="IDLE",nil,nil,0;p("SCRIPT_INIT: STATE=IDLE");while true do if scriptState=="IDLE"then pcall(function()p("IDLE:POLL");local res=requestFunc({Url=ngrok_url.."/api/get_data",Method="GET"});if res and res.StatusCode==200 and res.Body then local serverData=HttpService:JSONDecode(res.Body);if serverData and serverData.job_id and serverData.job_id~=lastProcessedJobId then p("NEW_JOB:"..serverData.job_id);lastProcessedJobId=serverData.job_id;currentJob=serverData;jobStartTime=os.clock();scriptState="BUSY";p("STATE->BUSY | WAITING FOR TARGET "..currentJob.player_info.username)end end end)elseif scriptState=="BUSY"then pcall(function()if os.clock()-jobStartTime>jobTimeout then w("!JOB_TIMEOUT");local report={status="expired",duration=os.clock()-jobStartTime,delivery_info={receiver=currentJob.player_info}};local report_body=HttpService:JSONEncode(report);requestFunc({Url=ngrok_url.."/api/report_delivery",Method="POST",Headers={["Content-Type"]="application/json"},Body=report_body});scriptState="IDLE";currentJob=nil;p("STATE->IDLE")return end;local targetPlayer=Players:FindFirstChild(currentJob.player_info.username);if targetPlayer then p("TGT_FOUND. DELIVERY_START");local itemToGive=currentJob.item_to_give;local rejectionTimeout,maxAttempts,startTime=45,2,os.clock();local petGiftingRemote,humanoid=ReplicatedStorage:WaitForChild("GameEvents",20):WaitForChild("PetGiftingService",20),LocalPlayer.Character:WaitForChild("Humanoid");local pets_to_process,inv_log_before={},{}local petContainer=LocalPlayer:WaitForChild("Backpack",10);for _,item in ipairs(petContainer:GetChildren())do if item:IsA("Tool")and item:GetAttribute("PET_UUID")then table.insert(inv_log_before,item:GetAttribute("PET_UUID"));if #pets_to_process<itemToGive.quantity and item.Name==itemToGive.name then table.insert(pets_to_process,{tool=item,uuid=item:GetAttribute("PET_UUID"),name=item.Name,status="pending",attempts=0})end end end;if #pets_to_process>0 then p("QUEUE:"..#pets_to_process.." PETS");local processed_count,force_stop=0,false;task.spawn(function()while processed_count<#pets_to_process and not force_stop do for _,petData in ipairs(pets_to_process)do if(petData.status=="pending"or petData.status=="failed_once")and petData.attempts<maxAttempts then petData.attempts=petData.attempts+1;p(">SEND "..petData.name.." #"..petData.attempts);humanoid:EquipTool(petData.tool);task.wait(0.2);petGiftingRemote:FireServer("GivePet",targetPlayer,petData.uuid);petData.status="sent";petData.sent_time=os.clock();task.wait(1)end end;task.wait(1)end end);task.spawn(function()while processed_count<#pets_to_process and not force_stop do if not Players:FindFirstChild(targetPlayer.Name)then w("!TGT_LEFT,FORCE_STOP");force_stop=true;break end;local received_uuids={};local targetBackpack=targetPlayer:FindFirstChild("Backpack");if targetBackpack then for _,receivedTool in ipairs(targetBackpack:GetChildren())do if receivedTool:IsA("Tool")and receivedTool:GetAttribute("PET_UUID")then received_uuids[receivedTool:GetAttribute("PET_UUID")]=true end end end;for _,petData in ipairs(pets_to_process)do if petData.status=="sent"then if received_uuids[petData.uuid]then petData.status="verified";processed_count=processed_count+1;p(">OK "..petData.name)elseif(os.clock()-petData.sent_time>rejectionTimeout)then if petData.attempts<maxAttempts then petData.status="failed_once";p(">TIMEOUT "..petData.name)else petData.status="permanently_failed";processed_count=processed_count+1;w("!FAIL "..petData.name)end end end end;task.wait(0.5)end end);repeat task.wait(1)until processed_count>=#pets_to_process or force_stop;local inv_log_after,report={},{}for _,i in ipairs(LocalPlayer.Backpack:GetChildren())do if i:IsA("Tool")and i:GetAttribute("PET_UUID")then table.insert(inv_log_after,i:GetAttribute("PET_UUID"))end end;report.uuids={successful={},failed={}};report.delivery_info={receiver={username=targetPlayer.Name,user_id=targetPlayer.UserId},counts={successful=0,failed=0}};for _,petData in ipairs(pets_to_process)do if petData.status=="verified"then report.delivery_info.counts.successful=report.delivery_info.counts.successful+1;table.insert(report.uuids.successful,petData.uuid)else report.delivery_info.counts.failed=report.delivery_info.counts.failed+1;table.insert(report.uuids.failed,petData.uuid)end end;report.status=force_stop and "interrupted" or (report.delivery_info.counts.failed==0 and "success" or "partial_failure");report.duration=os.clock()-startTime;report.inventory_logs={before=inv_log_before,after=inv_log_after};p("REPORTING:"..report.status);local report_body=HttpService:JSONEncode(report);requestFunc({Url=ngrok_url.."/api/report_delivery",Method="POST",Headers={["Content-Type"]="application/json"},Body=report_body});else w("!DELIVERY_ERR:NO_PETS_FOUND") end;scriptState="IDLE";currentJob=nil;p("TASK_END. STATE->IDLE")else p("BUSY:WAIT_TGT")end end)end;task.wait(5)end
