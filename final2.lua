local p,w=print,warn;local HttpService,Players,LocalPlayer,ReplicatedStorage=game:GetService("HttpService"),game:GetService("Players"),game:GetService("Players").LocalPlayer,game:GetService("ReplicatedStorage");local requestFunc=request or http_request or(syn and syn.request)or(fluxus and fluxus.request);if type(requestFunc)~="function"then w("!NO REQ")return end;local ngrok_url="https://549a-213-133-99-11.ngrok-free.app";local jobTimeout=600;local poll_interval=5;local scriptState,currentJob,jobStartTime="IDLE",nil,0;local function InitialTeleport()p("Başlangıç prosedürü başlatıldı...");if not game:IsLoaded()then p("Oyunun yüklenmesi bekleniyor...");game.Loaded:Wait();p("Oyun yüklendi.")end;p("Oyuncu karakteri bekleniyor...");local character=LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait();p("Karakter bulundu: "..character.Name);p("HumanoidRootPart bekleniyor...");local humanoidRootPart=character:WaitForChild("HumanoidRootPart",20);if humanoidRootPart then p("HumanoidRootPart bulundu. Işınlanma gerçekleştiriliyor...");local camera=workspace.CurrentCamera;local targetCFrame=CFrame.new(Vector3.new(34.05,8,14.92),Vector3.new(34.05,8,15.92));humanoidRootPart.CFrame=targetCFrame;camera.CameraType=Enum.CameraType.Scriptable;camera.CFrame=targetCFrame;task.wait(0.1);camera.CameraType=Enum.CameraType.Custom;p("✅ Başlangıç teleportasyonu başarılı.")else w("! BAŞLANGIÇ TELEPORTASYONU BAŞARISIZ: HumanoidRootPart 20 saniye içinde bulunamadı.")end end;local success,err=pcall(InitialTeleport);if not success then w("! Teleportasyon sırasında kritik hata: "..tostring(err))end;p("SCRIPT_INIT: Ana döngü başlıyor. STATE=IDLE");while true do if scriptState=="IDLE"then pcall(function()p("IDLE:POLL");local res=requestFunc({Url=ngrok_url.."/api/get_next_job",Method="GET"});if res and res.StatusCode==200 and res.Body and res.Body~="{}"then local serverData=HttpService:JSONDecode(res.Body);if serverData and serverData.job_id then p("NEW_JOB:"..serverData.job_id);currentJob=serverData;jobStartTime=os.clock();scriptState="BUSY";p("STATE->BUSY | WAITING FOR TARGET "..currentJob.player_info.username)end end end)elseif scriptState=="BUSY"then pcall(function()if os.clock()-jobStartTime>jobTimeout then w("!JOB_TIMEOUT");local report={status="expired",duration=os.clock()-jobStartTime,delivery_info={receiver=currentJob.player_info}};local report_body=HttpService:JSONEncode(report);local report_url=ngrok_url.."/api/report_delivery/"..currentJob.job_id;requestFunc({Url=report_url,Method="POST",Headers={["Content-Type"]="application/json"},Body=report_body});scriptState="IDLE";currentJob=nil;p("STATE->IDLE")return end;local targetPlayer=Players:FindFirstChild(currentJob.player_info.username);if targetPlayer then p("TGT_FOUND. SENDING_CONFIRMATION...");local all_players_list={};for _,player in ipairs(Players:GetPlayers())do table.insert(all_players_list,{username=player.Name,user_id=player.UserId})end;local confirmation_data={target_player={username=targetPlayer.Name,user_id=targetPlayer.UserId},current_server_players=all_players_list};local confirmation_body=HttpService:JSONEncode(confirmation_data);pcall(function()requestFunc({Url=ngrok_url.."/api/confirm_target",Method="POST",Headers={["Content-Type"]="application/json"},Body=confirmation_body})end);p("CONFIRMED. DELIVERY_START");local itemToGive=currentJob.item_to_give;local maxAttempts,startTime=2,os.clock();local petGiftingRemote,humanoid=ReplicatedStorage:WaitForChild("GameEvents",20):WaitForChild("PetGiftingService",20),LocalPlayer.Character:WaitForChild("Humanoid");local cust_inv_before={};local targetBackpackBefore=targetPlayer:FindFirstChild("Backpack");if targetBackpackBefore then for _,item in ipairs(targetBackpackBefore:GetChildren())do if item:IsA("Tool")and item:GetAttribute("PET_UUID")then table.insert(cust_inv_before,{name=item.Name,uuid=item:GetAttribute("PET_UUID")})end end end;local pets_to_process={};for _,item in ipairs(LocalPlayer.Backpack:GetChildren())do if item:IsA("Tool")and item:GetAttribute("PET_UUID")then if #pets_to_process<itemToGive.quantity and item.Name:lower():find(itemToGive.name:lower(),1,true)then table.insert(pets_to_process,{tool=item,uuid=item:GetAttribute("PET_UUID"),name=item.Name,status="pending",attempts=0})end end end;if #pets_to_process>0 then p("QUEUE:"..#pets_to_process.." PETS");local processed_count,force_stop,tradeWasDeclined,notificationConnection=0,false,false,nil;local PlayerGui=LocalPlayer:WaitForChild("PlayerGui");local TopNotificationGui=PlayerGui:WaitForChild("Top_Notification");local NotificationContainer=TopNotificationGui:WaitForChild("Frame");notificationConnection=NotificationContainer.ChildAdded:Connect(function(newNotification)local textLabel=newNotification:FindFirstChild("TextLabel",true);if textLabel and textLabel:IsA("TextLabel")then if textLabel.Text:lower():find("declined your trade",1,true)then tradeWasDeclined=true end end end);task.spawn(function()while processed_count<#pets_to_process and not force_stop do for _,petData in ipairs(pets_to_process)do if(petData.status=="pending"or petData.status=="failed_once")and petData.attempts<maxAttempts then petData.attempts=petData.attempts+1;p(">SEND "..petData.name.." #"..petData.attempts);humanoid:EquipTool(petData.tool);task.wait(0.2);petGiftingRemote:FireServer("GivePet",targetPlayer,petData.uuid);petData.status="sent";petData.sent_time=os.clock();task.wait(math.random(15,30)/10)end end;task.wait(1)end end);task.spawn(function()while processed_count<#pets_to_process and not force_stop do if not Players:FindFirstChild(targetPlayer.Name)then w("!TGT_LEFT,FORCE_STOP");force_stop=true;break end;if tradeWasDeclined then w("!UI_DECLINE_DETECTED! PROCESSING...");for _,petData in ipairs(pets_to_process)do if petData.status=="sent"then if petData.attempts<maxAttempts then petData.status="failed_once";p(">RETRY_SCHEDULED "..petData.name)else petData.status="permanently_failed";w("!MAX_ATTEMPTS_FAIL "..petData.name);processed_count=processed_count+1 end end end;tradeWasDeclined=false end;local received_uuids={};local targetBackpack=targetPlayer:FindFirstChild("Backpack");if targetBackpack then for _,receivedTool in ipairs(targetBackpack:GetChildren())do if receivedTool:IsA("Tool")and receivedTool:GetAttribute("PET_UUID")then received_uuids[receivedTool:GetAttribute("PET_UUID")]=true end end end;for _,petData in ipairs(pets_to_process)do if petData.status=="sent"then if received_uuids[petData.uuid]then petData.status="verified";processed_count=processed_count+1;p(">OK "..petData.name)end end end;task.wait(0.5)end end);repeat task.wait(1)until processed_count>=#pets_to_process or force_stop;if notificationConnection then notificationConnection:Disconnect();notificationConnection=nil end;local report={};report.uuids={successful={},failed={}};report.delivery_info={receiver={username=targetPlayer.Name,user_id=targetPlayer.UserId},counts={successful=0,failed=0},delivered_item={name=itemToGive.name,quantity=0}};for _,petData in ipairs(pets_to_process)do if petData.status=="verified"then report.delivery_info.counts.successful=report.delivery_info.counts.successful+1;table.insert(report.uuids.successful,petData.uuid)else report.delivery_info.counts.failed=report.delivery_info.counts.failed+1;table.insert(report.uuids.failed,petData.uuid)end end;report.delivery_info.delivered_item.quantity=report.delivery_info.counts.successful;local cust_inv_after={};local successful_uuids={};for _,uuid in ipairs(report.uuids.successful)do successful_uuids[uuid]=true end;local targetBackpackAfter=targetPlayer:FindFirstChild("Backpack");if targetBackpackAfter then for _,item in ipairs(targetBackpackAfter:GetChildren())do if item:IsA("Tool")and item:GetAttribute("PET_UUID")then local uuid=item:GetAttribute("PET_UUID");table.insert(cust_inv_after,{name=item.Name,uuid=uuid,newly_received=successful_uuids[uuid]or false})end end end;report.status=force_stop and "interrupted"or(report.delivery_info.counts.failed==0 and"success"or"partial_failure");report.duration=os.clock()-startTime;report.inventory_logs={before=cust_inv_before,after=cust_inv_after};p("REPORTING:"..report.status);local report_body=HttpService:JSONEncode(report);local report_url=ngrok_url.."/api/report_delivery/"..currentJob.job_id;requestFunc({Url=report_url,Method="POST",Headers={["Content-Type"]="application/json"},Body=report_body});else w("!DELIVERY_ERR:NO_PETS_FOUND")local report={status="failed",duration=os.clock()-startTime,delivery_info={receiver=currentJob.player_info,counts={successful=0,failed=itemToGive.quantity}},error_message="Uygun pet bulunamadı."};local report_body=HttpService:JSONEncode(report);local report_url=ngrok_url.."/api/report_delivery/"..currentJob.job_id;requestFunc({Url=report_url,Method="POST",Headers={["Content-Type"]="application/json"},Body=report_body});end;scriptState="IDLE";currentJob=nil;p("TASK_END. STATE->IDLE")else p("BUSY:WAIT_TGT")end end)end;task.wait(poll_interval)end
